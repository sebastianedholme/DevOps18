import tkinter as tk
import pymysql

class Application(tk.Frame): # pylint: disable=too-many-ancestors
    """
    This is the main application entry class
    """
    def __init__(self, master=None):
        super().__init__(master)

        # Creating menu objects
        self.topmenu = TopMenu(self)
        self.toolbar = ToolBar(self)
        self.statusbar = StatusBar(self)

        # Packing up
        self.topmenu.pack(side="top", fill="x")
        self.toolbar.pack(side="top", fill="x")
        self.statusbar.pack(side="bottom", fill="x")

class TopMenu(tk.Frame): # pylint: disable=too-many-ancestors
    """
    This is the top menu, with file and edit and so on...
    """
    def __init__(self, master=None):
        super().__init__(master)

        self.menu = tk.Menu(self.master)

        root.config(menu=self.menu)

        self.file_menu = tk.Menu(self.menu, tearoff=0)

        self.menu.add_cascade(label="File", menu=self.file_menu)

        self.file_menu.add_command(label="Login..")
        self.file_menu.add_separator()

class ToolBar(tk.Frame): # pylint: disable=too-many-ancestors
    """
    This is a toolbar that is autogenerated with icons that exist in the icon
    folder
    """
    def __init__(self, master=None):
        super().__init__(master)

        files_path = 'icons/'

        # Den här dictionaryn innehåller namn på alla knappar
        # jag vill använda, och vilken funktion som ska vara associerad
        # till knappen.
        self.buttons_dictionary = {'user-bookmarks': self.bookmarks,
                                   'user-home': self.home,
                                   'user-trash': self.trash,
                                   'preferences-desktop-display': self.pref}

        buttons_list = [] # Lista som innehåller alla knapp objekt
        for btn_name, function in self.buttons_dictionary.items():
            buttons_list.append(tk.Button(self, command=function))
            b = buttons_list[-1] # Referera till den senast tillagda knappen i listan
            b.image = tk.PhotoImage(file=files_path+btn_name+'.png')
            b.configure(image=b.image)
            b.pack(side="left")

    def bookmarks(self):
        # eftersom att jag öppnar db fönstret här så så måste jag referea
        # tillbaka till self.master.
        open_db_settings = DbSettingsWindow(self.master)
        open_db_settings.pack(side="left")

    def home(self):
        print("home")

    def trash(self):
        print("trash")

    def pref(self):
        print("pref")

class StatusBar(tk.Frame): # pylint: disable=too-many-ancestors
    """
    This is the statusbar. It can take messages from master.toolbar.status_text
    """
    def __init__(self, master=None):
        super().__init__(master)

        self.status_text = tk.StringVar()

        self.label = tk.Label(self, bd=1, relief=tk.SUNKEN, anchor=tk.W,
                              textvariable=self.status_text)
        self.status_text.set("Status bar")
        self.label.pack(fill=tk.X)

class DbSettingsWindow(tk.Frame): # pylint: disable=too-many-ancestors, too-many-instance-attributes
    """
    This window is to set the database information
    """
    def __init__(self, master=None):
        super().__init__(master)

        self.window = tk.Toplevel()

        # Labels
        self.label_host = tk.Label(self.window, text="Host")
        self.label_user = tk.Label(self.window, text="User")
        self.label_passwd = tk.Label(self.window, text="Password")
        self.label_db = tk.Label(self.window, text="Databse")

        # Entries
        self.entry_host = tk.Entry(self.window)
        self.entry_user = tk.Entry(self.window)
        self.entry_passwd = tk.Entry(self.window, show="*")
        self.entry_db = tk.Entry(self.window)

        # Buttons
        self.connect_btn = tk.Button(self.window, text=("Connect"),
                                     command=self.test_connection)
        self.close_btn = tk.Button(self.window, text="Close",
                                   command=self.close_window)

        # Packing
        self.label_host.pack(fill="x")
        self.entry_host.pack(fill="x")
        self.label_user.pack(fill="x")
        self.entry_user.pack(fill="x")
        self.label_passwd.pack(fill="x")
        self.entry_passwd.pack(fill="x")
        self.label_db.pack(fill="x")
        self.entry_db.pack(fill="x")

        self.connect_btn.pack(side="left")
        self.close_btn.pack(side="right")
        #self.pack()

    def test_connection(self):
        self.master.statusbar.status_text.set('Trying to connect')

    def close_window(self):
        self.window.destroy()

class MySQLConnector:
    """
    My databse connector
    """

    def __init__(self, *args):
        self._connection = pymysql.connect(host=args[0],
                                           user=args[1],
                                           passwd=args[2],
                                           db=args[3],
                                           cursorclass=pymysql.cursors.DictCursor)

        self._cursor = self._connection.cursor ()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        Makes it so that every time i exit out from a with it closes the db connection
        """
        self.connection.close()

    @property
    def connection(self):
        return self._connection

    @property
    def cursor(self):
        return self._cursor

    @property
    def db_info(self):
        return self.db_info

    @db_info.setter
    def db_info(self, *arg):
        self.db_info = [*arg]
if __name__ == "__main__":
    root = tk.Tk()
    Application(master=root).pack(side="top", fill="both", expand=True)
    root.mainloop()
